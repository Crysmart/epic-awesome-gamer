[{"id":0,"href":"/epic-awesome-gamer/zh/docs/player/cli/overview/","title":"Overview","section":"脚手架指令","content":"V2RSS 脚手架指令\r#\r\r基础指令\r#\r\rscaffold ping\r#\r\r测试 Redis 数据库连接。\r\rscaffold build\r#\r\r在 Ubuntu 中构建基础运行环境。\r\r\r订阅管理\r#\r\rscaffold pool\r#\r\r订阅池的命令行管理工具。功能包括：剔除 alive_pool 中的失效订阅或过期订阅，输出订阅池状态等。\r\r\r\r系统任务\r#\r\rscaffold deploy\r#\r\r部署定时任务节点。\r\rscaffold synergy\r#\r\r部署协同工作节点。\r\r\rscaffold server\r#\r\r部署 PRODUCTION 接口服务器。\r\rscaffold entropy\r#\r\r采集队列的命令行管理工具。功能包括：更新待办任务、更新采集队列容量，检查待办任务心跳，输出采集队列摘要信息。\r\r\r高级指令\r#\r\rscaffold mining\r#\r\r采集、清洗、分类、存储暴露在公网上的 SSPanel-Uim 站点。\r\rscaffold spawn\r#\r\r释放所有本机采集实例，基于 gevent 并发执行。\r\r\r实验功能\r#\r\rscaffold ash\r#\r\r通过设定的 threshold 审查订阅池，清洗出各类订阅中的优质节点，重新排列组合生成可被 Clash 吸收的规则的 config.yaml ；自动打开 Clash 导入配置文件。\r\r\r\r"},{"id":1,"href":"/epic-awesome-gamer/zh/docs/user/quick-start/","title":"快速上手","section":"使用指南","content":"快速上手\r#\r\r本文以 Workflows（查看源码） 为例引导玩家基于本机环境熟悉并快速实现脚手架 Get 指令，成为 Epic免费人。\nGitHub Actions\r📌 本项目仍处于测试阶段，请不要直接添加 schedule trigger 作为定时任务运行！\r\r引言\r#\r\r作者认为，在 GitHub Actions 上运行 Get 指令是本项目的最佳实践方案，请在 fork 项目后依次实现下文所述配置。\n当然，如果你本身就对工作流十分了解，以下手工配置的总耗时不会超过30秒（想不起账号密码的话另说233\u0026hellip;）。\n配置环境密钥\r#\r\r 进入自己的项目页面，依次进入 「Settings」「Secrets」，点击 New repository secret ，分别创建环境密钥 EPIC_EMAIL 以及 EPIC_PASSWORD。变量名必须大写。脚手架演示指令不作质量担保，所以此处你需要填入正确无误的账号信息。 密钥创建后的页面截图如下所示：  \r运行工作流\r#\r\r 进入到自己的项目页面，进入「Actions」 运行工作流，点击 Run Workflow 。  \r 等待窗口顶部弹出提示 Workflow run was successfully requested. 后重新进入「Actions」页面，可以看到工作流已经启动，可以点进去查看运行过程，等待结束即可。  \r​\t展开 Workflow 运行截图（参考）\n\r\r\r\rLinux(Ubuntu)\rWindows\rMacOS\r\r查看游戏库\r#\r\r以你喜欢的方式查看自己的游戏库。如果能实现下图所示效果，说明你也成为了 Epic免费人！\nHappy Freebie Claiming\r\r\r\r\r"},{"id":2,"href":"/epic-awesome-gamer/zh/docs/player/cli/ping/","title":"Scaffold Ping","section":"脚手架指令","content":"Scaffold Ping\r#\r\rNAME\r#\r\rmain.py ping - 测试 RedisNode 连接\nSYNOPSIS\r#\r\rmain.py ping - DESCRIPTION\r#\r\r测试数据库连接。这是个不常用的功能，仅会在新环境首次创建时使用，如 在 GitHub Actions 中检查配置是否正确；在本地初次调试时，检查配置文件中 REDIS_NODE 是否配置正确等。\n"},{"id":3,"href":"/epic-awesome-gamer/zh/docs/player/getting-started/install-v2rss/","title":"源码下载","section":"开始使用","content":"源码下载\r#\r\r"},{"id":4,"href":"/epic-awesome-gamer/zh/docs/player/getting-started/basic-usage/","title":"基本用法","section":"开始使用","content":"基本用法\r#\r\r"},{"id":5,"href":"/epic-awesome-gamer/zh/docs/player/getting-started/directory-structure/","title":"目录结构","section":"开始使用","content":"目录结构\r#\r\rNew Project Scaffolding\r#\r\r.\r├── examples\r├── src\r│ ├── apis\r│ ├── database\r│ ├── model\r│ ├── services\r│ ├── config.py\r│ ├── config.yaml\r│ ├── config-sample.yaml\r│ └── main.py\r└── requirements.txt\rDiretory Structure Explained\r#\r\rexamples\r#\r\r这里存放一些精简化的后端功能接口，玩家可通过这些运行案例迅速了解服务间的层级关系以及核心业务的实现逻辑。\nsrc/apis\r#\r\r存放全局接口函数，如一些复杂的脚手架接口逻辑会在此编排。\nsrc/database\r#\r\r存放系统运行缓存。在项目初始化后，此文件夹被自动创建。\nsrc/model\r#\r\r存放 YOLOv4 目标检测模型。在项目初始化后，此文件夹被自动创建。\nsrc/services\r#\r\r存放核心业务代码，包括如下内容：\n.\r├── bricklayer\r│ ├── __init__.py\r│ ├── core.py\r│ └── exceptions.py\r├── explorer\r│ ├── __init__.py\r│ ├── core.py\r│ └── exceptions.py\r├── utils\r│ ├── accelerator\r│ ├── armor\r│ ├── toolbox\r│ └── __init__.py\r├── __init__.py\r├── deploy.py\r├── scaffold.py\r└── settings.py\r  bricklayer\n采集器逻辑层代码。core.py 存放核心业务代码，包含采集器整个周期的行为函数；actions.py 维护一个 __entropy__ 本地采集队列，存放着采集实例的上下文摘要信息；operator.py 存放着一个接口解释器，输入 atomic_context ，输出一个特征完整的采集实例；exceptions.py 存放采集器运行时常见的报错类型。\n  explorer\n订阅解耦器，核心功能是清楚失效订阅。\n  utils\n可移植模组。\n  deploy.py\n系统任务的调度中心。\n  scaffold.py\n脚手架源码。\n  settings.py\n系统设置。设定全局变量用于精确的绝对路径定位，初始化系统日志，引用 src/config.py 中的配置信息。\n  src/config.yaml\r#\r\r项目配置文件。在项目初始化后，从 src/config_sample.yaml 拷贝生成。 src/config.py 的功能是读取配置信息并转义成 Python 全局变量。\n关于配置文件的具体介绍可见「\rCONFIGURATION」。\nsrc/main.py\r#\r\r脚手架入口文件，作为运行根辐射系统指令，在脚手架未编译前，作为系统指令的统一入口。\n"},{"id":6,"href":"/epic-awesome-gamer/zh/docs/player/getting-started/configuration/","title":"项目配置","section":"开始使用","content":"项目配置\r#\r\r"},{"id":7,"href":"/epic-awesome-gamer/zh/docs/player/cli/deploy/","title":"Scaffold Deploy","section":"脚手架指令","content":"Scaffold Deploy\r#\r\rNAME\r#\r\rmain.py deploy - 部署系统定时任务\nSYNOPSIS\r#\r\rmain.py deploy \u0026lt;flags\u0026gt; DESCRIPTION\r#\r\r部署系统定时任务。\nUsage: python main.py deploy ______________________________________________________________________ or: python main.py deploy --collector=False |强制关闭采集器 or: python main.py deploy --collector |强制开启采集器 or: python main.py deploy --collector --decoupler |强制开启采集器和订阅解耦器 ______________________________________________________________________  初次部署前先运行 python main.py entropy --update 初始化远程队列。 命令行参数的优先级高于配置文件。 不使用参数启动时，相关配置以配置文件为准。  定时任务包括如下内容：\n collector： 采集器任务（与 overdue_job 捆绑）。 decoupler： 订阅解耦任务，用于清除失效订阅。  需要注意的是，配置文件中设定了默认的 launch_interval 任务发起间隔，玩家自定义的间隔数不得小于默认值，否则任务无法部署（或强制调回默认值启动）。\nFLAGS\r#\r\r  collector=COLLECTOR\n  Type: Optional[bool]\n  Default: None\n强制开启/关闭采集器\n    decoupler=DECOUPLER\n  Type: Optional[bool]\n  Default: None\n强制开启/关闭订阅解耦器\n    "}]